CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 1   


CX51 COMPILER V7.50, COMPILATION OF MODULE PROCOTOL
OBJECT MODULE PLACED IN procotol.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\CX51.EXE procotol.c LARGE OBJECTADVANCED ROM(HUGE) OPTIMIZE(SIZE) BROWSE DEBUG

line level    source

   1          #undef _DEBUG_TRACE
   2          #define PROCOTOL_C
   3          #include "debug.h" 
   4          #include "device.h"
   5          #include "serial1.h"
   6          #include "procotol.h" 
   7          #include "scheduler.h"
   8          #include "string.h"
   9          #include "Coiner.h"
  10          #include "Casher.h"
  11          #include "vti.h"
  12          
  13          #define CMDHEAD_7652Hub 0xEE    //Added by Andy Zhang on Jan 17,2007
  14          #define ACKHEAD_7652Hub 0xFE
  15          
  16          unsigned char xdata DownMsgBuf[ 64 ];
  17          unsigned char xdata     GoodsPacketLen = 0;
  18          bit      data GoodsWaitACKLog = 0;
  19          
  20          SERAIL1PARAM code ZhkBusSerialParam = 
  21          { 
  22                  8 , VERIFY_NULL , 1 , 0x00 , 0x96 , 0x00        
  23          };
  24          void ZhkBusSerialInit( void )
  25          {
  26   1              unsigned char data i;
  27   1              for( i = 0 ; i < sizeof( SERAIL1PARAM ) ; i ++ )
  28   1                      ZhkSerial1Param[ i ] = ZhkBusSerialParam[ i ];
  29   1              ZhkSerial1Init();
  30   1              memset( DownMsgBuf, 0, sizeof( DownMsgBuf ) );
  31   1      }
  32          
  33          /*
  34          //关闭宝联硬币器电源包
  35          unsigned char ZyzBusTxMsg( struct COMMTASK xdata* Task )
  36          {
  37                  unsigned char  data i;
  38                  unsigned char  data len;
  39                  unsigned char  data sum;
  40                  unsigned char xdata DataString[ 64 ];
  41                  
  42          //      Trace( "\n ZhkBusTxMsg" );
  43                  len = Task->ParamLen + 6;
  44                  DataString[ 0 ] = CMDHEAD_7652Hub;
  45                  DataString[ 1 ] = len;
  46                  DataString[ 2 ] = Task->Sn;
  47          //      Trace( "\n Task->Sn = %bu", Task->Sn );
  48                  DataString[ 3 ] = Task->Cmd;
  49                  DataString[ 4 ] = Task->Id;
  50                  for( i = 0 ; i <= len - 6 ; i ++ )
  51                          DataString[ 5 + i ] = Task->Param[ i ]; 
  52                  sum = 0;
  53                  for( i = 0 ; i < DataString[ 1 ] - 1 ; i ++ )
  54                  {
  55                          sum ^= DataString[ i ];
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 2   

  56                  }
  57                  DataString[ len - 1 ] = sum;    
  58                  for( i = 0 ; i < len ; i ++ )           
  59                          ZhkSerial1PutCh( DataString[ i ] );                     
  60                  return 1;
  61          }
  62          */
  63          unsigned char ZhkBusTxMsg( struct COMMTASK xdata* Task )
  64          {
  65   1              unsigned char  data i;
  66   1              unsigned char  data len;
  67   1              unsigned char  data sum;
  68   1              unsigned char xdata DataString[ 64 ];
  69   1              
  70   1      //      Trace( "\n ZhkBusTxMsg" );
  71   1              len = Task->ParamLen + 6;
  72   1              DataString[ 0 ] = CMDHEAD;
  73   1              DataString[ 1 ] = len;
  74   1              DataString[ 2 ] = Task->Sn;
  75   1      //      Trace( "\n Task->Sn = %bu", Task->Sn );
  76   1              DataString[ 3 ] = Task->Cmd;
  77   1              DataString[ 4 ] = Task->Id;
  78   1              for( i = 0 ; i <= len - 6 ; i ++ )
  79   1                      DataString[ 5 + i ] = Task->Param[ i ]; 
  80   1              sum = 0;
  81   1              for( i = 0 ; i < DataString[ 1 ] - 1 ; i ++ )
  82   1              {
  83   2                      sum ^= DataString[ i ];
  84   2              }
  85   1              DataString[ len - 1 ] = sum;    
  86   1              for( i = 0 ; i < len ; i ++ )           
  87   1                      ZhkSerial1PutCh( DataString[ i ] );                     
  88   1              
  89   1      #ifdef _DEBUG_TRACE
                      if( Task->Id == ID_CHANNEL )//ID_HOPPER2
                      {
                              Trace( "\n Bus Snd str ");      
                              for( i = 0 ; i < len ; i ++ )
                                      Trace( " %02bx,",DataString[ i ] );
                              Trace( "\n" );
                      }
              #endif  
  98   1      
  99   1              return 1;
 100   1      }
 101          
 102          unsigned char ZhkBusFrameUnPack( struct COMMTASK xdata* Result  )
 103          {
 104   1              unsigned char data i,j;
 105   1              unsigned char data len;
 106   1              unsigned char data sum;
 107   1              
 108   1      
 109   1              j = 0;
 110   1              while( ! ZhkSerial1IsRxBufNull() )
 111   1              {
 112   2                      for( i = 0 ; i < sizeof( DownMsgBuf ) - 1 ; i ++ )
 113   2                              DownMsgBuf[ i ] = DownMsgBuf[ i + 1 ];
 114   2                      DownMsgBuf[ sizeof( DownMsgBuf ) - 1 ] = ZhkSerial1GetCh();
 115   2      #ifdef _DEBUG_TRACE
                              j ++ ;
              #endif
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 3   

 118   2              }
 119   1      /*
 120   1      #ifdef _DEBUG_TRACE
 121   1              if( j )
 122   1              {
 123   1                      Trace( "\n Bus Return Str = ");
 124   1                      for( j = 0; j < 32; j++ )
 125   1                              Trace( " %02bx", DownMsgBuf[32+j] );
 126   1                      j = 0;
 127   1              }
 128   1      #endif
 129   1      */
 130   1              for( i = 0 ; i <= sizeof( DownMsgBuf ) - 6 ; i ++ )
 131   1              {
 132   2                      if ( DownMsgBuf[ i ] != ACKHEAD ) 
 133   2                              continue;       
 134   2                      len = DownMsgBuf[ i + 1 ];      
 135   2                      if ( i + len > sizeof( DownMsgBuf ) )
 136   2                              break;   
 137   2                      sum = 0;
 138   2                      for( j = i ; j < i + len ; j ++ )               
 139   2                      {
 140   3                              sum ^= DownMsgBuf[ j ];         
 141   3                      }
 142   2                      if ( sum != 0 )         
 143   2                              continue;
 144   2              
 145   2                      //完整的数据包
 146   2                      if( ( DownMsgBuf[ i + 4 ] == ID_HOPPER1 ) || ( DownMsgBuf[ i + 4 ] == ID_HOPPER2 ) || ( DownMsgBuf[ i + 
             -4 ] == ID_HOPPER3 ) || ( DownMsgBuf[ i + 4 ] == ID_SELECTION1 ) || ( DownMsgBuf[ i + 4 ] == ID_SELECTION2 ) || ( DownMsg
             -Buf[ i + 4 ] == ID_SELECTION3 ) || ( DownMsgBuf[ i + 4 ] == ID_ACDCMODULE ) )
 147   2                      {
 148   3                  /*-------------------------------------------------
 149   3                  //Disabled for the VMC reset by watch dog
 150   3                              if( Result->Sn != DownMsgBuf[ i+2 ] )
 151   3                              {
 152   3                              #ifdef _DEBUG_TRACE                                             
 153   3                                      Trace( "\n Bus Return Unpack SN is error = ");
 154   3                                      for( j = i; j < i + len; j++ )
 155   3                                              Trace( " %02bx", DownMsgBuf[j] );                                       
 156   3                              #endif  
 157   3                                      memset( Result, 0, sizeof( Result ) );
 158   3                                      sum = 0;
 159   3                                      for( sum = i; sum < i + len; sum ++ )
 160   3                                              DownMsgBuf[sum] = 0x00;
 161   3                                      return 0;
 162   3                              }
 163   3                  ==================================================*/
 164   3                      }
 165   2                      memset( Result, 0, sizeof( Result ) );
 166   2                      Result->ParamLen = len - 6;
 167   2                      Result->Sn       = DownMsgBuf[ i + 2 ];
 168   2                      Result->State    = DownMsgBuf[ i + 3 ];         
 169   2                      Result->Id       = DownMsgBuf[ i + 4 ];
 170   2      
 171   2                      for( j = 0 ; j < len - 6 ; j ++ )               
 172   2                              Result->Param[ j ] = DownMsgBuf[ i + j + 5 ];           
 173   2                      sum = 0;
 174   2                      for( sum = i; sum < i + len; sum ++ )
 175   2                              DownMsgBuf[sum] = 0x00;
 176   2      /*
 177   2      #ifdef _DEBUG_TRACE             
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 4   

 178   2                      Trace( "\n Bus Return Unpack = ");
 179   2                      for( j = 0; j < 32; j++ )
 180   2                              Trace( " %02bx", DownMsgBuf[32+j] );            
 181   2      #endif*/
 182   2                      return 1;
 183   2              }       
 184   1              return 0;
 185   1      }
 186          
 187          unsigned char ZhkCasherFrameUnPack( struct COMMTASK xdata* Result )
 188          {
 189   1              unsigned char  xdata i,j,sum;
 190   1              unsigned char  xdata buf[ 3 ];
 191   1              
 192   1              
 193   1      //      Trace( "\n Get Cash Return Begin ");
 194   1      //      Trace( "\n Cash Return Str = ");
 195   1              j = 0;
 196   1              while( ! ZhkSerial1IsRxBufNull() )
 197   1              {
 198   2                      for( i = 0 ; i <= sizeof( DownMsgBuf ) - 1 ; i ++ )
 199   2                              DownMsgBuf[ i ] = DownMsgBuf[ i + 1 ];
 200   2                      DownMsgBuf[ sizeof( DownMsgBuf ) - 1 ] = ZhkSerial1GetCh();
 201   2              //      Trace( " %02bx", DownMsgBuf[ sizeof( DownMsgBuf ) - 1 ] );
 202   2      #ifdef _DEBUG_TRACE
                              j ++ ;
              #endif
 205   2              }               
 206   1      /*
 207   1      #ifdef _DEBUG_TRACE
 208   1              if( j )
 209   1              {
 210   1                      Trace( "\n Casher Return Str = ");
 211   1                      for( j = 0; j < 32; j++ )
 212   1                              Trace( " %02bx", DownMsgBuf[32+j] );
 213   1                      j = 0;
 214   1              }
 215   1      #endif  
 216   1      */
 217   1      //      Trace( "\n Get Cash Return End ");
 218   1              while( 1 )
 219   1              {
 220   2                      for( i = 0; i <= sizeof( DownMsgBuf ) - 0x0B; i ++ )
 221   2                      {
 222   3                              if( ( DownMsgBuf[i] == VTISERIAL_FRAMEHEAD ) && ( DownMsgBuf[ i + 1 ] == 0x0B ) )
 223   3                              {
 224   4                                      //找到包头
 225   4                                      break;
 226   4                              }
 227   3                      }
 228   2                      if( i > sizeof( DownMsgBuf ) - 0x0B )//没有找到包头退出
 229   2                              return 0;
 230   2                      //找到包头处理  
 231   2                      if ( DownMsgBuf[ i + 9 ] != VTISERIAL_FRAMETAIL ) 
 232   2                      {
 233   3                              //包头和包尾不配对,应该乱包，除去包头标志
 234   3                      //      for( sum = i; sum < sizeof( DownMsgBuf ); sum ++ )
 235   3                      //              DownMsgBuf[sum] = DownMsgBuf[sum + 2 ];
 236   3                              DownMsgBuf[ i ] = 0x00;
 237   3                              DownMsgBuf[ i + 1 ] = 0x00;             
 238   3                      }
 239   2                      else
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 5   

 240   2                              break;
 241   2              
 242   2                      //包头、尾配对,查校验           
 243   2                      sum = 0;
 244   2                      for( j = i + 1 ; j < i + 8 ; j ++ )
 245   2                      {
 246   3                              sum ^= DownMsgBuf[ j ];                 
 247   3                      }
 248   2                      if ( DownMsgBuf[ i + 10 ] != sum ) 
 249   2                      {
 250   3                              //包校验不对，乱包，除去包头
 251   3                              sum = 0;
 252   3      //                      for( sum = i; sum < sizeof( DownMsgBuf ); sum ++ )
 253   3      //                              DownMsgBuf[sum] = DownMsgBuf[sum + 2 ];
 254   3                              DownMsgBuf[ i ] = 0x00;
 255   3                              DownMsgBuf[ i + 1 ] = 0x00;             
 256   3                      }
 257   2                      else
 258   2                              break;
 259   2              }
 260   1              //是完整而正确的包
 261   1              #ifdef _DEBUG_TRACE
                              Trace( "\n Cash Return OK Str");
                              for( j = i; j <= i + 10 ; j ++ )                
                                      Trace( " 0x%02bx",DownMsgBuf[ j ] );    
                              Trace( "\n" );
                      #endif
 267   1              buf[ 0 ] = 0;
 268   1              buf[ 1 ] = 0;
 269   1              buf[ 2 ] = 0;
 270   1              
 271   1              if ( DownMsgBuf[ i + 3 + 0 ] & 0x04 ) buf[ 0 ] |= 0x10;//有钱进入
 272   1              if ( DownMsgBuf[ i + 3 + 0 ] & 0x10 ) buf[ 0 ] |= 0x20;//已存入
 273   1              if ( DownMsgBuf[ i + 3 + 0 ] & 0x40 ) buf[ 0 ] |= 0x80;//已返回
 274   1              if ( DownMsgBuf[ i + 3 + 2 ] & 0x02 ) buf[ 0 ] |= 0x04;//命令错误
 275   1              if ( DownMsgBuf[ i + 3 + 2 ] & 0x04 ) buf[ 0 ] |= 0x40;//故障
 276   1              buf[ 1 ]  = DownMsgBuf[ i + 3 + 1 ] & 0x7F;//纸币器和钱箱状态
 277   1              buf[ 2 ]  = DownMsgBuf[ i + 3 + 2 ] / 8;
 278   1              buf[ 2 ] &= 0x07;//收到的币种编号
 279   1              
 280   1      //      Trace( "\n Result->State = %02bx", buf[ 0 ] );
 281   1              Result->State      = buf[ 0 ];//纸币状态
 282   1              Result->Param[ 0 ] = buf[ 1 ];//纸币器状态
 283   1              Result->Param[ 1 ] = buf[ 2 ];////收到的币种编号
 284   1              Result->ParamLen   = 3;
 285   1              sum = 0;
 286   1              for( sum = i; sum < i + 11; sum ++ )
 287   1                      DownMsgBuf[sum] = 0x00;
 288   1      //      for( sum = sizeof( DownMsgBuf ) - 11; sum < sizeof( DownMsgBuf ); sum ++ )
 289   1      //              DownMsgBuf[sum] = 0x00;                         
 290   1              return 1;       
 291   1      }
 292          
 293          /////////////////////////////////////////////////////////////////////
 294          //      函数返回值注释                                                                                                  //
 295          //0：继续等待;1：响应正确                                                                                       //
 296          //
 297          //10：应答正确;                                                                                                         //
 298          //11：应答表明序列号重复;调整序列后号可重发;                                            //
 299          //12：应答表明发送了错误的命令或经校验是错误的命令;此次出货失败         //
 300          //////////////////////////////////////////////////////////////////////
 301          unsigned char ZhkChannelFrameUnPack( struct COMMTASK xdata* Result  )
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 6   

 302          {
 303   1              unsigned char xdata i;
 304   1              unsigned char xdata ret = 0;
 305   1              unsigned char xdata sum;
 306   1              unsigned char xdata j = 0;
 307   1      //      unsigned char data packetHeard; 
 308   1                      
 309   1              j = 0;
 310   1              while( ! ZhkSerial1IsRxBufNull() )
 311   1              {
 312   2                      for( i = 0 ; i <= sizeof( DownMsgBuf ) - 1 ; i ++ )
 313   2                              DownMsgBuf[ i ] = DownMsgBuf[ i + 1 ];
 314   2                      DownMsgBuf[ sizeof( DownMsgBuf ) - 1 ] = ZhkSerial1GetCh();                     
 315   2      #ifdef _DEBUG_TRACE
                              j++;
              #endif
 318   2              }
 319   1      
 320   1      #ifdef _DEBUG_TRACE
                      if( j != 0 )
                      {
                              Trace( "\n Channel Return Str = " );            
                              for( i = 0; i < j  ; i ++ )
                                      Trace( " %02bx", DownMsgBuf[ 64 - j + i ] );            
                      }
                      j = 0;
              #endif
 329   1      
 330   1              //找应答帧
 331   1              for( i = 0; i <= sizeof( DownMsgBuf ) - 8 ; i++ ) 
 332   1              {                       
 333   2                      if( ( ( DownMsgBuf[ i ] == 0xee ) && ( DownMsgBuf[ i + 1 ] == 0x08 ) ) )                                
 334   2                      {
 335   3                      //      Trace( "\n Channel Find Heard1" );              
 336   3                      //      Trace( "\n Result->Sn = %bu, DownMsgBuf[ i + 2 ] = %bu",Result->Sn, DownMsgBuf[ i + 2 ]);               
 337   3                              if( Result->Sn == DownMsgBuf[ i + 2 ] ) 
 338   3                              {
 339   4                              //      Trace( "\n Channel Find SN" );          
 340   4                                      //是本次的应答包                                
 341   4                                      sum = 0;
 342   4                                      for( ret = 0; ret < 7; ret ++ )
 343   4                                              sum ^= DownMsgBuf[ i + ret ];                   
 344   4                                      if( sum == DownMsgBuf[ i + 7 ] )//完整的响应包                          
 345   4                                      {
 346   5                                              memset( Result, 0, sizeof( Result ) );
 347   5                                              Result->State = DownMsgBuf[ i + 5 ];//状态码
 348   5                                              Result->Param[0] = DownMsgBuf[ i + 4 ];//货道号
 349   5                                              Result->Param[1] = DownMsgBuf[ i + 2 ];//包序列号
 350   5                                              
 351   5                                      //      memset( DownMsgBuf + GoodsPacketLen - i - 8, 0, i + 8 );
 352   5                                      //      GoodsPacketLen = GoodsPacketLen - i - 8;        
 353   5                              #ifdef _DEBUG_TRACE
                                                      Trace( "\n Channel Return Unpack = " );         
                                                      for( j = 0; j < 8  ; j ++ )
                                                              Trace( " %02bx", DownMsgBuf[ i + j ] );                                                 
                                      #endif
 358   5                                              //除去前面的所有字节应答包
 359   5                                              for( sum = 0; sum < i + 8; sum++ )
 360   5                                                      DownMsgBuf[ sum ] = 0x00;
 361   5      
 362   5                                              return 1;
 363   5                                      }                                                                                                       
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 7   

 364   4                              }                                                                                       
 365   3                      }
 366   2              }
 367   1              return 0;
 368   1      }
 369          
 370          //控制宝连硬币器的电源
 371          /*
 372          unsigned char CtrlCoinPowerFrameUnPack( struct COMMTASK xdata* Result  )
 373          {
 374                  unsigned char data i,j;
 375                  unsigned char data len;
 376                  unsigned char data sum;
 377                  
 378          
 379                  j = 0;
 380                  while( ! ZhkSerial1IsRxBufNull() )
 381                  {
 382                          for( i = 0 ; i < sizeof( DownMsgBuf ) - 1 ; i ++ )
 383                                  DownMsgBuf[ i ] = DownMsgBuf[ i + 1 ];
 384                          DownMsgBuf[ sizeof( DownMsgBuf ) - 1 ] = ZhkSerial1GetCh();
 385          #ifdef _DEBUG_TRACE
 386                          j ++ ;
 387          #endif
 388                  }
 389          
 390          #ifdef _DEBUG_TRACE
 391                  if( j )
 392                  {
 393                          Trace( "\n CtrlCoinPowerFrameUnPack Bus Return Str = ");
 394                          for( j = 0; j < 32; j++ )
 395                                  Trace( " %02bx", DownMsgBuf[32+j] );
 396                          j = 0;
 397                  }
 398          #endif
 399          
 400                  for( i = 0 ; i <= sizeof( DownMsgBuf ) - 6 ; i ++ )
 401                  {
 402                          if ( DownMsgBuf[ i ] != ACKHEAD_7652Hub ) 
 403                                  continue;       
 404                          len = DownMsgBuf[ i + 1 ];      
 405                          if ( i + len > sizeof( DownMsgBuf ) )
 406                                  break;   
 407                          sum = 0;
 408                          for( j = i ; j < i + len ; j ++ )               
 409                          {
 410                                  sum ^= DownMsgBuf[ j ];         
 411                          }
 412                          if ( sum != 0 )         
 413                                  continue;
 414                  
 415          
 416                          memset( Result, 0, sizeof( Result ) );
 417                          Result->ParamLen = len - 6;
 418                          Result->Sn       = DownMsgBuf[ i + 2 ];
 419                          Result->State    = DownMsgBuf[ i + 3 ];         
 420                          Result->Id       = DownMsgBuf[ i + 4 ];
 421          
 422          
 423                          for( j = 0 ; j < len - 6 ; j ++ )               
 424                                  Result->Param[ j ] = DownMsgBuf[ i + j + 5 ];           
 425                          sum = 0;
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 8   

 426                          for( sum = i; sum < i + len; sum ++ )
 427                                  DownMsgBuf[sum] = 0x00;
 428                  //      for( sum = sizeof( DownMsgBuf ) - len; sum < sizeof( DownMsgBuf ); sum ++ )
 429                  //              DownMsgBuf[sum] = 0x00;                         
 430          //              for( j = 0 ; j < sizeof( DownMsgBuf ) ; j ++ )
 431          //                      DownMsgBuf[ j ] = 0;
 432                  Trace( "ZhkHubRevDataOK\n" );
 433                          return 1;
 434                  }       
 435                  return 0;
 436          }
 437          */
 438          /*
 439          unsigned char CoinerFrameUnPack( struct COMMTASK xdata* Result )
 440          {
 441                  unsigned char  xdata i;
 442                  unsigned char  xdata j;
 443                  unsigned char  xdata sum;
 444                  unsigned char  xdata len;       
 445          
 446                  j = 0;
 447                  while( ! ZhkSerial1IsRxBufNull() )
 448                  {
 449                          for( i = 0 ; i <= sizeof( DownMsgBuf ) - 1 ; i ++ )
 450                                  DownMsgBuf[ i ] = DownMsgBuf[ i + 1 ];
 451                          DownMsgBuf[ sizeof( DownMsgBuf ) - 1 ] = ZhkSerial1GetCh();     
 452          #ifdef _DEBUG_TRACE
 453                          j++;    
 454          #endif
 455                  }
 456                  while( 1 )
 457                  {
 458                          for( i = 0; i <= sizeof( DownMsgBuf ) - 0x03; i ++ )
 459                          {
 460                                  if( DownMsgBuf[i] == HYKSERIAL_FRAMEHEAD )
 461                                          //找到包头
 462                                          break;                  
 463                          }
 464                  //      Trace( "\n Find Pack head1 ");
 465                          if( i > sizeof( DownMsgBuf ) - 0x03 )//没有找到包头退出
 466                                  return 0;
 467                          
 468                          len = DownMsgBuf[i + 1];
 469                          if( len == 6 )
 470                                  len = 5;
 471                          if( ( i + len ) > sizeof( DownMsgBuf ) )//找到包头,但包不完整,去掉前面的数据                            
 472                                  return 0;
 473                          
 474                          //查校验                
 475                          sum = 0;
 476                          for( j = i; j < ( i + len - 1 ); j ++ )         
 477                                  sum += DownMsgBuf[ j ];                 
 478                          
 479                  //      Trace( "\n sum = %02bx", sum ); 
 480                          if ( DownMsgBuf[ i + len - 1 ] != sum ) 
 481                          {
 482                                  //包校验不对，乱包，除去包头
 483                                  sum = 0;
 484                                  for( sum = i; sum < sizeof( DownMsgBuf ); sum ++ )
 485                                          DownMsgBuf[sum] = DownMsgBuf[sum + 1 ];                 
 486                                  DownMsgBuf[ sum - 1 ] = 0x00;                   
 487                          }
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 9   

 488                          else
 489                                  break;
 490                  }
 491                  //是完整而正确的包
 492                  j = 0;
 493                  len = 0;
 494                  sum = 0;
 495          //      Trace("\n Result->Cmd = %02bx", Result->Cmd );
 496                  if( Result->Cmd == COINER1_QUERY )//查询
 497                  {
 498                  //      Trace( "\n Cash Query1");
 499                          if( ( DownMsgBuf[i + 2] != 0x61 ) && ( DownMsgBuf[i + 3] != 0x76 ) )
 500                          {
 501                                  //状态查询成功
 502                                  j = 1;
 503                                  len = DownMsgBuf[i + 2];
 504                                  sum = DownMsgBuf[i + 3];                        
 505                          //      if( ( len == 0x11 ) || ( len == 0x12 ) )
 506                          //              sum &= 0x07;                    
 507                  //         Trace( "\n Cash Query2");
 508                          }
 509                          else
 510                                  j = 2;//无效
 511                  }       
 512                  else
 513                  {
 514                          if( ( DownMsgBuf[i + 2] == 0x61 ) && ( DownMsgBuf[i + 3] == 0x76 ) )//无效的命令
 515                                  j = 2;//无效
 516                          else            
 517                                  j = 1;//有效            
 518                  }
 519          //      Trace( "\n Cash Query3");       
 520                  Result->State      = j;//硬币器回应
 521                  Result->Param[ 0 ] = len;//硬币器状态
 522                  Result->Param[ 1 ] = sum;////收到的币种编号
 523                  Result->ParamLen   = 3;
 524                  sum = 0;
 525                  len = DownMsgBuf[i + 1];
 526                  if( len == 6 )
 527                          len = 5;
 528                  for( sum = i; sum < i + 5; sum ++ )
 529                          DownMsgBuf[sum] = 0x00;
 530          //      for( ; sum < sizeof( DownMsgBuf ); sum ++ )
 531          //              DownMsgBuf[sum] = 0x00;                         
 532          //      for( sum = i; sum < sizeof( DownMsgBuf ); sum ++ )
 533          //              DownMsgBuf[sum] = DownMsgBuf[sum + len ];
 534          //      for( ; sum < sizeof( DownMsgBuf ); sum ++ )
 535          //              DownMsgBuf[sum] = 0x00;                         
 536                  return 1;       
 537          }
 538          */
 539          unsigned char ZhkChkAddr( unsigned char Addr )
 540          {
 541   1              switch( Addr )
 542   1              {
 543   2              case ID_HOPPER1:
 544   2              case ID_HOPPER2:
 545   2              case ID_HOPPER3:
 546   2              case ID_HOPPER4:
 547   2              case ID_HOPPER5:
 548   2              case ID_HOPPER6:
 549   2              case ID_HOPPER7:
CX51 COMPILER V7.50   PROCOTOL                                                             09/30/2014 13:53:11 PAGE 10  

 550   2              case ID_HOPPER8:
 551   2                      return EQUIP_HOPPER;
 552   2              case ID_SELECTION1:
 553   2              case ID_SELECTION2:
 554   2              case ID_SELECTION3:
 555   2                  return EQUIP_SELECTION;
 556   2          case ID_ACDCMODULE:
 557   2              return EQUIP_ACDCMODULE;
 558   2      //      case ID_HUB:
 559   2      //              return EQUIP_HUB;
 560   2              case ID_LCD:
 561   2                      return EQUIP_LCD;
 562   2              case ID_POWER:
 563   2                      return EQUIP_POWER;
 564   2              case ID_MODE:
 565   2                      return EQUIP_MODE;
 566   2              case ID_PRN:
 567   2                      return EQUIP_PRN;
 568   2              case ID_CASHER:
 569   2                      return EQUIP_CASHER;
 570   2              case ID_COINER1:
 571   2              case ID_COINER2:
 572   2              case ID_COINER3:
 573   2              case ID_COINER4:
 574   2                      return EQUIP_COINER;
 575   2              case ID_MESSAGER:
 576   2                      return EQUIP_MESSAGER;
 577   2              case ID_SERVER:
 578   2                      return EQUIP_SEVER;
 579   2              case ID_CHANNEL:
 580   2                      return EQUIP_CHANNEL;
 581   2      //      case ID_LEDSCR:
 582   2      //              return EQUIP_LEDSCR;
 583   2              case ID_NULL:
 584   2              default:
 585   2                      return EQUIP_NULL;
 586   2              }
 587   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1851    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =     65      78
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


CX51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
